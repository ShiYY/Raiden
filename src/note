001-项目开发概述
1.1 目标
综合运用JavaSE基础知识(面向对象 集合 线程)
熟练使用Eclipse进行跟踪调试
掌握部分程序开发技巧
建立代码封装思想
理解本项目的一些设计模式
UML初步
1.2项目术语
1.2.1产品和项目
项目可以简单的理解为就是程序代码的一个集合,为了达到既定的目标要求,以实现这种需求为特定的应用软件
产品面向的对象比较广泛一些,他不以个人意志为转移,以开发商为主导的;
项目是特定的应用群体,应用在某一个层面,或某一个小众范围内,以客户需求为主导的开发成果;
项目风险小,跟客户签订合同以后才会进行开发.
1.2.2C/S和B/S
C/S客户端服务器
B/S浏览器服务器
1.2.3项目过程管理
需求分析(观察需求,忠于需求)
系统设计(技术路线选型 基本的架构 技术难点预研)
系统开发(延期需要提前打招呼,不能最后时刻上报)
系统测试(单元测试 联调测试 测试人员测试)
系统部署
系统试运行
验收
2.需求分析

3.设计模式
3.1MVC
MVC设计模式提倡内容与显示相分离

模型(Model)-视图(View)-控制器(Controller),它几乎适用于所有带界面的软件开发,因为几乎所有的软件都是带界面的
所谓模型,即概念模型及需求中提到的各种复杂的业务逻辑(各种规则),他们都是模型的一部分

所谓视图,即用户界面,关于界面的操作及界面如何呈现

所谓控制器,即用户通过几面与系统交互,用户的操作(比如各种鼠标点击,各种键盘控制)事件将传递给控制器去处理(在Swing编程中,控制器就是
各种Listener).控制器将用户从界面中传递过来的数据,转送给模型,更新模型的状态; 或者从模型中获取界面所需要的数据返回给界面

记住:视图就是模型状态的呈现,控制器负责视图与模型之间的数据传递,视图与模型之间也可以直接沟通

3.2建造者设计模式Builder,(不是GOF中的)
描述的是对象构造过程严密的一环套一环,而且将生命周期紧密的联系在一起

3.3门面设计模式(Facade)
如果没有Game,则GameMain需要深入到业务内部与各个游戏物体交互,GameMain在调用时过于复杂,需要非常清楚了解业务内部的组织关系
门面提供了业务与界面交互的统一口径,GameMain只需要与门面进行交互即可